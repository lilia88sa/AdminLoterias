<?php

declare(strict_types=1);

namespace App\Admin\Security;

use App\Entity\Security\User;
use App\DataTransforms\UserStatus;
use App\DataTransforms\UserStatusDataTransformer;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use Sonata\AdminBundle\Templating\TemplateRegistry;
use Sonata\DoctrineORMAdminBundle\Filter\StringFilter;
use Sonata\Form\Type\BooleanType;
use Sonata\Form\Validator\ErrorElement;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Validator\Exception\ValidatorException;

final class UserAdmin extends AbstractAdmin
{

    protected function configureDatagridFilters(DatagridMapper $datagridMapper): void
    {
        $datagridMapper
            ->add('id')
            ->add('name')
            ->add('email')
            ->add('enabled')
            ->add('status', StringFilter::class, [], ChoiceType::class, [
                'translation_domain' => 'sonata_messages',
                'choices' => [
                    'PENDING_FOR_APPROVAL' => User::STATUS_PENDING_FOR_APPROVAL,
                    'APPROVED' => User::STATUS_APPROVED,
                    'REJECTED' => User::STATUS_REJECTED,
                    'CLOSED' => User::STATUS_CLOSED
                ]
            ])
            ;
    }

    protected function configureListFields(ListMapper $listMapper): void
    {
        $listMapper
            ->add('id')
            ->add('name')
            ->add('email')
            ->add('enabled',TemplateRegistry::TYPE_BOOLEAN, array('editable' => true))
            ->add('status', TemplateRegistry::TYPE_CHOICE, [
                'editable' => true,
                'choices' => UserStatus::choices(),
                'data_transformer' => new UserStatusDataTransformer()
                /*'template' => 'security/_list_status.html.twig'*/])
            ->add('_action', null, [
                'actions' => [
                    'show' => [],
                    'edit' => [],
                    'delete' => [],
                ],
            ]);
    }

    public function validate(ErrorElement $errorElement, $object)
    {
        parent::validate($errorElement, $object); // TODO: Change the autogenerated stub
        if(is_null($object->getId())){
        $user_mail = $this->getModelManager()->findOneBy(User::class,['email' => $object->getEmail()]);
        $user_username = $this->getModelManager()->findOneBy(User::class,['username' => $object->getUsername()]);
        if($user_username){
            $errorElement
                ->with('username')
                ->addViolation('El username esta siendo utilizado por otro usuario')
                ->end();
        }
        if($user_mail){
            $errorElement
                ->with('email')
                ->addViolation('El email esta siendo utilizado por otro usuario')
                ->end();
        }
      }
    }

    protected function configureFormFields(FormMapper $formMapper): void
    {

//        dump($this->isGranted('ROLE_EDITOR'));
//        dump($this->hasAccess('list'));
//         dump($this->canAccessObject('list',$this->getSubject()));
//        dump($this->checkAccess('list'));die;
        $subject = $this->getSubject();
        if (is_null($subject->getId())) {
            $formMapper
                ->add('name')
                ->add('username')
                ->add('password',PasswordType::class)
                ->add('email')
                ->add('roles',ChoiceType::class,[
                    'translation_domain' => 'sonata_messages',
                    'choices' => [
                        'ROLE_ADMIN' => 'ROLE_ADMIN',
                        'ROLE_USER' => 'ROLE_USER',
                        'ROLE_SUPER_ADMIN' => 'ROLE_SUPER_ADMIN',
                        'ROLE_EDITOR' => 'ROLE_EDITOR',
                        'ROLE_WRITER' => 'ROLE_WRITER'
                    ],
                    'multiple' => true
                ])
                ->add('status', ChoiceType::class,[
                    'translation_domain' => 'sonata_messages',
                    'choices' => [
                        'PENDING_FOR_APPROVAL' => User::STATUS_PENDING_FOR_APPROVAL,
                        'APPROVED' => User::STATUS_APPROVED,
                        'REJECTED' => User::STATUS_REJECTED,
                        'CLOSED' => User::STATUS_CLOSED
                    ]
                ])
                ->add('enabled')
                ->add('client');
               // ->add('privacy', BooleanType::class);
        }else{
            $formMapper
                ->add('name')
                ->add('username')
                ->add('email')
                ->add('roles',ChoiceType::class,[
                    'translation_domain' => 'sonata_messages',
                    'choices' => [
                        'ROLE_ADMIN' => 'ROLE_ADMIN',
                        'ROLE_USER' => 'ROLE_USER',
                        'ROLE_SUPER_ADMIN' => 'ROLE_SUPER_ADMIN',
                        'ROLE_EDITOR' => 'ROLE_EDITOR',
                        'ROLE_WRITER' => 'ROLE_WRITER'
                    ],
                    'multiple' => true
                ])
                ->add('status', ChoiceType::class,[
                    'translation_domain' => 'sonata_messages',
                    'choices' => [
                        'PENDING_FOR_APPROVAL' => User::STATUS_PENDING_FOR_APPROVAL,
                        'APPROVED' => User::STATUS_APPROVED,
                        'REJECTED' => User::STATUS_REJECTED,
                        'CLOSED' => User::STATUS_CLOSED
                    ]
                ])
                ->add('enabled');
        }

    }

    public function preValidate($object): void{
        if(is_null($object->getId())){
        $object->setPassword(
            $this->getConfigurationPool()->getContainer()->get(
                'security.password_encoder')->encodePassword(
                    $object, $object->getPassword()));
        $object->setConfirmationToken(
            $this->getConfigurationPool()->getContainer()->get(
            'security.token_confirmation')->getRandomSecureToken($object->getEmail()));
        }
    }

    public function prePersist($object)
    {
        if(is_null($object->getId())){
            $this->getConfigurationPool()->getContainer()->get(
                'app.mailer')->sendConfirmationEmail($object);
        }
    }

    public function postPersist($object)
    {

    }

    protected function configureShowFields(ShowMapper $showMapper): void
    {
        $showMapper
            ->add('id')
            ->add('name')
            ->add('email')
            ->add('roles',TemplateRegistry::TYPE_ARRAY,[
                'inline' => true,
                'display' => 'values',
                'translation_domain' => 'sonata_messages'])
            ->add('enabled')
            ->add('status', null,[
                'template' => 'security/_show_status.html.twig'
            ])
            ;
    }

    public function toString($object)
    {
        return $object instanceof User
            ? $object->getUsername()
            : 'Usuario'; // shown in the breadcrumb on the create view
    }


    protected function configureDefaultSortValues(array &$sortValues): void
    {
        $sortValues['_sort_order'] = 'DESC';
    }

    public function getExportFields(): array
    {
        return ['id', 'name', 'username', 'email', 'roles', 'status'];
    }
}
